export default {
  name: 'ru',
  form: {
    field: 'Поле',
    title: 'Заголовок',
    info: 'Информация',
    control: 'Управление',
    labelPosition: 'Положение метки',
    labelStyle: 'Стиль метки',
    labelSuffix: 'Суффикс метки',
    size: 'Размер формы',
    event: 'Событие формы',
    labelWidth: 'Ширина метки',
    hideRequiredAsterisk: 'Скрыть красную звездочку рядом с меткой обязательного поля',
    showMessage: 'Показать сообщение об ошибке проверки',
    inlineMessage: 'Показать информацию о проверке в строке',
    submitBtn: 'Показывать кнопку отправки формы',
    resetBtn: 'Показывать кнопку сброса формы',
    appendChild: 'Вставить дочерний элемент',
    formMode: 'Режим формы',
    formName: 'Название формы',
    componentMode: 'Компонент',
    document: 'Документация'
  },
  computed: {
    fieldUsed: '[{label}] Используется в формуле вычисления, сначала измените соответствующую формулу',
    fieldExist: '[{label}] Поле уже существует',
    fieldEmpty: 'Поле обязательно для заполнения',
    fieldChar: 'Поле должно начинаться с буквы'
  },
  validate: {
    type: 'Тип',
    typePlaceholder: 'Выберите',
    trigger: 'Триггер',
    mode: 'Метод проверки',
    modes: {
      required: 'обязательное',
      pattern: 'шаблон',
      validator: 'валидатор',
      min: 'минимум',
      max: 'максимум',
      len: 'длина'
    },
    types: {
      string: 'Строка',
      array: 'Множественный выбор',
      number: 'Число',
      integer: 'Целое число',
      float: 'Число с плавающей точкой',
      object: 'Коллекция',
      date: 'Дата',
      url: 'URL',
      email: 'Электронная почта'
    },
    message: 'Ошибка',
    auto: 'Автоматически',
    autoRequired: 'Введите {title}',
    autoMode: 'Введите корректный {title}',
    requiredPlaceholder: 'Введите',
    required: 'Обязательное',
    rule: 'Проверка'
  },
  tableOptions: {
    handle: 'Операция',
    add: 'Добавить',
    empty1: 'Нажмите в правом нижнем углу',
    empty2: 'Кнопку для добавления столбца',
    rmCol: 'Удалить текущий столбец',
    rmRow: 'Удалить текущую строку',
    splitRow: 'Разделить на строки',
    splitCol: 'Разделить на столбцы',
    mergeBottom: 'Объединить вниз',
    mergeRight: 'Объединить вправо',
    addTop: 'Добавить столбец сверху',
    addBottom: 'Добавить снизу',
    addLeft: 'Добавить столбец слева',
    addRight: 'Добавить столбец справа',
    keyValue: 'ключ-значение'
  },
  struct: {
    title: 'Редактировать',
    only: '[{label}] Разрешено добавить только один',
    errorMsg: 'Введенное содержимое синтаксически неверно',
    configured: 'Настроено'
  },
  event: {
    title: 'Редактировать',
    create: 'Создать',
    list: 'Список',
    placeholder: 'Введите название события',
    saveMsg: 'Сохраните редактируемое событие',
    type: 'Тип',
    info: 'Информация',
    label: 'Поле',
    inject: {
      api: 'API текущей формы',
      rule: 'Создать правила для текущей формы',
      self: 'Правило генерации компонента',
      option: 'Конфигурация формы',
      args: 'Исходные параметры события'
    }
  },
  fetch: {
    title: 'Настроить данные',
    create: 'Создать данные',
    config: 'Запрос',
    action: 'Действие',
    actionRequired: 'Введите корректную ссылку',
    placeholder: 'Введите название источника данных',
    method: 'Метод',
    data: 'Прикрепленные данные',
    headers: 'Заголовки',
    parse: 'Обработка',
    response: 'Данные, возвращенные интерфейсом',
    onError: 'При ошибке',
    remote: 'Удаленный',
    static: 'Статический',
    optionsType: {
      fetch: 'Запрос',
      struct: 'Статический'
    }
  },
  style: {
    width: 'Ширина',
    height: 'Высота',
    color: 'Цвет',
    backgroundColor: 'Цвет фона',
    margin: 'Внешний отступ',
    padding: 'Внутренний отступ',
    borderRadius: 'Радиус границы',
    border: 'Граница',
    solid: 'Сплошная',
    dashed: 'Пунктирная',
    dotted: 'Точечная',
    double: 'Двойная',
    opacity: 'Прозрачность',
    scale: 'Масштаб',
    shadow: {
      name: 'Тень',
      x: 'Смещение по оси X',
      y: 'Смещение по оси Y',
      vague: 'Радиус размытия',
      extend: 'Радиус расширения',
      inset: 'Внутренняя',
      external: 'Внешняя',
      mode: 'Режим',
      classic: 'Классический',
      flat: 'Плоский',
      solid: 'Объемный'
    },
    font: {
      name: 'Шрифт',
      size: 'Размер',
      align: 'Выравнивание',
      height: 'Высота строки',
      spacing: 'Межбуквенный интервал',
      preview: 'Предпросмотр'
    },
    decoration: {
      name: 'Оформление',
      underline: 'Подчеркивание',
      'line-through': 'Зачеркивание',
      overline: 'Надчеркивание'
    },
    weight: {
      name: 'Толщина шрифта',
      300: 'Тонкий',
      400: 'По умолчанию',
      500: 'Средний',
      700: 'Жирный'
    }
  },
  designer: {
    component: 'Компонент',
    id: 'Уникальный ID',
    name: 'Серийный номер',
    type: 'Тип',
    form: 'Форма',
    style: 'Стиль',
    rule: 'Основа',
    advanced: 'Расширенные',
    props: 'Свойства',
    validate: 'Проверка',
    event: 'Событие',
    clearWarn: 'После очистки восстановление невозможно. Вы уверены, что хотите очистить?',
    childEmpty: 'Нажмите кнопку \\e789 в правом нижнем углу, чтобы добавить столбец',
    dragEmpty: 'Перетащите компоненты из списка слева сюда',
    unload: 'Вы уверены, что хотите покинуть текущую страницу?'
  },
  menu: {
    main: 'Основные',
    aide: 'Вспомогательные',
    layout: 'Макет',
    component: 'Компонент',
    subform: 'Подформа',
    tree: 'Структура'
  },
  props: {
    disabled: 'Отключено',
    time: 'Время',
    email: 'Электронная почта',
    number: 'Число',
    globalData: 'Глобальные данные',
    mobile: 'Мобильный',
    pc: 'ПК',
    reactive: 'Реактивный',
    title: 'Заголовок',
    content: 'Содержимое',
    collection: 'Коллекция',
    group: 'Группа',
    custom: 'Пользовательский',
    change: 'Изменить',
    blur: 'Потеря фокуса',
    preview: 'Предпросмотр',
    clear: 'Очистить',
    cancel: 'Отмена',
    close: 'Закрыть',
    ok: 'ОК',
    save: 'Сохранить',
    refresh: 'Обновить',
    submit: 'Отправить',
    reset: 'Сбросить',
    copy: 'Копировать',
    delete: 'Удалить',
    hide: 'Скрыть',
    show: 'Показать',
    position: 'Положение',
    render: 'Рендеринг',
    large: 'Большой',
    default: 'По умолчанию',
    small: 'Маленький',
    always: 'Всегда',
    never: 'Никогда',
    hover: 'Наведение',
    click: 'Клик',
    button: 'Кнопка',
    year: 'Год',
    month: 'Месяц',
    date: 'Дата',
    dates: 'Даты',
    week: 'Неделя',
    datetime: 'Дата и время',
    'datetime-local': 'Дата и время',
    datetimerange: 'Диапазон даты и времени',
    daterange: 'Диапазон дат',
    monthrange: 'Диапазон месяцев',
    left: 'Слева',
    right: 'Справа',
    top: 'Сверху',
    text: 'Текст',
    picture: 'Изображение',
    'picture-card': 'Изображение-карточка',
    center: 'Центр',
    vertical: 'Вертикальный',
    horizontal: 'Горизонтальный',
    manage: 'Управление',
    key: 'Ключ',
    name: 'Имя',
    value: 'Значение',
    inputData: 'Значение по умолчанию',
    append: 'Добавить',
    options: 'Опции',
    option: 'Опция',
    callback: 'Обратный вызов',
    _self: 'Текущее окно',
    _blank: 'Новое окно',
    _parent: 'Родительское окно',
    _top: 'Верхнее окно'
  },
  com: {
    cascader: {
      name: 'Cascader',
      event: {
        expandChange: 'Срабатывает при изменении развернутого узла',
        removeTag: 'В режиме множественного выбора срабатывает при удалении тега'
      },
      props: {
        props: 'Опции',
        placeholder: 'Заполнитель',
        disabled: 'Отключено',
        clearable: 'Поддерживается очистка опций',
        showAllLevels: 'Отображать полный путь выбранного значения в поле ввода',
        collapseTags: 'Сворачивать теги в режиме множественного выбора',
        collapseTagsTooltip: 'Отображать все выбранные теги при наведении на текст свернутого тега',
        separator: 'Разделитель',
        filterable: 'Можно ли искать опцию',
        tagType: 'Тип тега'
      },
      propsOpt: {
        multiple: 'Множественный выбор',
        expandTrigger: 'Способ развертывания подменю',
        checkStrictly: 'Строго ли не связаны родительские и дочерние узлы',
        emitPath: 'При изменении выбранного узла возвращать массив значений меню каждого уровня',
        value: 'Значение указанной опции как атрибут объекта опции',
        label: 'Метка указанной опции как атрибут объекта опции',
        children: 'Дочерняя опция указанной опции как атрибут объекта опции',
        disabled: 'Отключение указанной опции как атрибут объекта опции',
        leaf: 'Флаг листового узла указанной опции как атрибут объекта опции'
      }
    },
    checkbox: {
      name: 'Чек-бокс',
      props: {
        input: 'Заполнять ли',
        type: 'Тип',
        disabled: 'Отключено',
        min: 'Минимальное количество выбираемых элементов',
        max: 'Максимальное количество выбираемых элементов',
        textColor: 'Цвет шрифта при активной кнопке',
        fill: 'Цвет границы и фона при активной кнопке'
      }
    },
    col: {
      name: 'Столбец',
      props: {
        span: 'Количество столбцов, занимаемых сеткой',
        offset: 'Количество пробелов слева от сетки',
        push: 'Смещение сетки вправо на количество ячеек',
        pull: 'Смещение сетки влево на количество ячеек'
      }
    },
    colorPicker: {
      name: 'Выбор цвета',
      event: {
        activeChange: 'Срабатывает при изменении цвета, отображаемого в панели'
      },
      props: {
        disabled: 'Отключено',
        showAlpha: 'Поддерживается ли выбор прозрачности',
        colorFormat: 'Формат цвета',
        predefine: 'Предопределенный цвет'
      }
    },
    datePicker: {
      name: 'Дата',
      props: {
        pickerOptions: 'Опции, специфичные для текущего выбора времени и даты',
        readonly: 'Только для чтения',
        disabled: 'Отключено',
        type: 'Тип',
        editable: 'Можно ли вводить в текстовое поле',
        clearable: 'Показывать кнопку очистки',
        placeholder: 'Заполнитель для выбора без диапазона',
        startPlaceholder: 'Заполнитель для начальной даты при выборе диапазона',
        endPlaceholder: 'Заполнитель для конечной даты при выборе диапазона',
        format: 'Формат, отображаемый в поле ввода',
        align: 'Выравнивание',
        rangeSeparator: 'Разделитель при выборе диапазона',
        unlinkPanels: 'Разъединить две панели дат в селекторе диапазона'
      }
    },
    dateRange: {
      name: 'Диапазон дат'
    },
    timeRange: {
      name: 'Диапазон времени'
    },
    elAlert: {
      name: 'Оповещение',
      description: 'Описание',
      props: {
        title: 'Заголовок',
        type: 'Тип',
        description: 'Вспомогательный текст',
        closable: 'Можно ли закрыть',
        center: 'Центрирован ли текст',
        closeText: 'Пользовательский текст кнопки закрытия',
        showIcon: 'Показывать иконку',
        effect: 'Выбрать предоставленную тему'
      }
    },
    elButton: {
      name: 'Кнопка',
      props: {
        formCreateChild: 'Содержимое',
        size: 'Размер',
        type: 'Тип',
        plain: 'Простая кнопка',
        round: 'Скругленные углы',
        circle: 'Круглая кнопка',
        loading: 'Состояние загрузки',
        disabled: 'Отключено'
      }
    },
    elCard: {
      name: 'Карточка',
      props: {
        header: 'Заголовок',
        shadow: 'Время отображения тени'
      }
    },
    elCollapse: {
      name: 'Сворачиваемая панель',
      event: {
        change: 'Переключение активной панели, тип — строка в режиме аккордеона, массив в других режимах'
      },
      props: {
        accordion: 'Режим аккордеона'
      }
    },
    elCollapseItem: {
      name: 'Элемент сворачиваемой панели',
      props: {
        title: 'Заголовок панели',
        name: 'Идентификатор',
        disabled: 'Отключено'
      }
    },
    elDivider: {
      name: 'Разделитель',
      props: {
        formCreateChild: 'Установить содержимое',
        contentPosition: 'Положение содержимого'
      }
    },
    elTabPane: {
      name: 'Вкладка',
      props: {
        label: 'Заголовок',
        disabled: 'Отключено',
        name: 'Идентификатор вкладки',
        lazy: 'Отложенный рендеринг метки'
      }
    },
    elTabs: {
      name: 'Вкладки',
      event: {
        tabClick: 'Срабатывает при выборе вкладки',
        tabChange: 'Срабатывает при изменении activeName',
        tabRemove: 'Срабатывает при нажатии кнопки удаления вкладки',
        tabAdd: 'Срабатывает при нажатии кнопки добавления новой вкладки',
        edit: 'Срабатывает после нажатия кнопки добавления или удаления вкладки'
      },
      props: {
        type: 'Тип',
        closable: 'Можно ли закрыть метку',
        tabPosition: 'Положение вкладки',
        stretch: 'Растягивается ли ширина метки автоматически'
      }
    },
    elTag: {
      name: 'Tag',
      props: {
        formCreateNative: 'Показывать заголовок',
        formCreateTitle: 'Заголовок',
        formCreateChild: 'Содержимое',
        type: 'Тип',
        size: 'Размер тега',
        effect: 'Тема тега',
        closable: 'Можно ли закрыть',
        disableTransitions: 'Отключить анимацию перехода',
        hit: 'Есть ли обводка границы',
        round: 'Круглый тег',
        color: 'Цвет фона'
      }
    },
    elTransfer: {
      name: 'Transfer',
      event: {
        leftCheckChange: 'Срабатывает, когда пользователь выбирает/снимает выбор с элемента левого списка',
        rightCheckChange: 'Срабатывает, когда пользователь выбирает/снимает выбор с элемента правого списка'
      },
      props: {
        filterable: 'Можно ли искать',
        filterPlaceholder: 'Заполнитель поля поиска',
        targetOrder: 'Стратегия сортировки элементов списка справа',
        targetOrderInfo: 'Если original, сохраняется тот же порядок, что и в данных; если push, новые элементы помещаются в конец; если unshift, новые элементы помещаются в начало',
        titles: 'Заголовок',
        buttonTexts: 'Содержимое кнопок',
        props: 'Псевдоним поля источника данных'
      }
    },
    elTreeSelect: {
      name: 'TreeSelect',
      event: {
        removeTag: 'Срабатывает при удалении тега в режиме множественного выбора'
      },
      props: {
        multiple: 'Множественный выбор',
        disabled: 'Отключено',
        clearable: 'Можно ли очистить опцию',
        collapseTags: 'Отображать выбранное значение как текст при множественном выборе',
        multipleLimit: 'Максимальное количество элементов, выбираемых пользователем при множественном выборе, 0 — без ограничений',
        placeholder: 'Заполнитель',
        props: 'Опции',
        renderAfterExpand: 'Рендерить дочерние узлы после первого развертывания узла дерева',
        defaultExpandAll: 'Развернуть все узлы по умолчанию',
        expandOnClickNode: 'Развернуть или свернуть узел при клике на него',
        checkOnClickNode: 'Выбирать узел при клике на него',
        nodeKey: 'Атрибут для уникальной идентификации каждого узла дерева, должен быть уникальным для всего дерева'
      }
    },
    fcEditor: {
      name: 'Редактор',
      props: {
        disabled: 'Отключено'
      }
    },
    fcRow: {
      name: 'Строка',
      props: {
        gutter: 'Интервал сетки',
        type: 'Режим гибкого макета',
        justify: 'Горизонтальное выравнивание в гибком макете',
        align: 'Вертикальное выравнивание в гибком макете'
      }
    },
    fcTable: {
      name: 'Таблица',
      props: {
        border: 'Показывать границу',
        borderColor: 'Цвет границы',
        borderWidth: 'Ширина границы'
      }
    },
    fcTableGrid: {
      name: 'Сетка'
    },
    group: {
      name: 'Подформа',
      props: {
        disabled: 'Отключено',
        syncDisabled: 'Принудительно синхронизировать состояние отключения с подформой',
        expand: 'Установить элементы, развернутые по умолчанию',
        button: 'Показывать кнопку операций',
        sortBtn: 'Показывать кнопку сортировки',
        min: 'Минимальное количество добавляемых элементов',
        max: 'Максимальное количество добавляемых элементов'
      }
    },
    html: {
      name: 'HTML',
      props: {
        formCreateNative: 'Показывать заголовок',
        formCreateTitle: 'Заголовок',
        formCreateChild: 'Содержимое'
      }
    },
    input: {
      name: 'Поле ввода',
      event: {
        change: 'Срабатывает при изменении значения, когда компонент теряет фокус или пользователь нажимает Enter'
      },
      props: {
        type: 'Тип',
        maxlength: 'Максимальная длина ввода',
        minlength: 'Минимальная длина ввода',
        placeholder: 'Заполнитель',
        clearable: 'Показывать кнопку очистки',
        disabled: 'Отключено',
        readonly: 'Только для чтения'
      }
    },
    inputNumber: {
      name: 'Числовое поле',
      props: {
        precision: 'Точность входного значения',
        min: 'Минимальное допустимое значение счетчика',
        max: 'Максимальное допустимое значение счетчика',
        step: 'Шаг',
        stepStrictly: 'Можно ли вводить только кратные шагу значения',
        disabled: 'Отключено',
        controls: 'Использовать кнопки управления',
        controlsPosition: 'Положение кнопок управления',
        placeholder: 'Заполнитель'
      }
    },
    password: {
      name: 'Пароль',
      event: {
        change: 'Срабатывает при изменении значения, когда компонент теряет фокус или пользователь нажимает Enter'
      },
      props: {
        disabled: 'Отключено',
        readonly: 'Только для чтения',
        maxlength: 'Максимальная длина ввода',
        minlength: 'Минимальная длина ввода',
        placeholder: 'Заполнитель',
        clearable: 'Показывать кнопку очистки'
      }
    },
    radio: {
      name: 'Радио кнопка',
      props: {
        input: 'Заполнять ли',
        disabled: 'Отключено',
        type: 'Тип',
        textColor: 'Цвет текста при активации формы кнопки',
        fill: 'Цвет заливки и границы при активации формы кнопки'
      }
    },
    rate: {
      name: 'Оценка',
      props: {
        max: 'Максимальный балл',
        disabled: 'Отключено',
        allowHalf: 'Разрешить половинный выбор',
        voidColor: 'Цвет иконки, когда не выбрано',
        disabledVoidColor: 'Цвет иконки, когда не выбрано в режиме только чтение',
        voidIconClass: 'Имя класса иконки, когда не выбрано',
        disabledVoidIconClass: 'Имя класса иконки, когда не выбрано в режиме только чтение',
        showScore: 'Показывать текущий балл',
        textColor: 'Цвет вспомогательного текста',
        scoreTemplate: 'Шаблон отображения балла'
      }
    },
    select: {
      name: 'Выбор',
      event: {
        removeTag: 'Срабатывает при удалении тега в режиме множественного выбора'
      },
      props: {
        multiple: 'Множественный выбор',
        disabled: 'Отключено',
        clearable: 'Можно ли очистить опцию',
        collapseTags: 'Отображать выбранное значение как текст при множественном выборе',
        multipleLimit: 'Максимальное количество элементов, выбираемых пользователем при множественном выборе, 0 — без ограничений',
        placeholder: 'Заполнитель',
        filterable: 'Можно ли искать',
        allowCreate: 'Разрешено ли пользователю создавать новые записи',
        noMatchText: 'Текст, отображаемый, когда нет совпадений с условиями поиска',
        noDataText: 'Текст, отображаемый, когда опция пуста',
        reserveKeyword: 'При множественном выборе и поиске сохранять текущие ключевые слова поиска после выбора опции',
        defaultFirstOption: 'Нажмите Enter в поле ввода, чтобы выбрать первый подходящий элемент',
        remote: 'Загружаются ли опции удаленно с сервера',
        remoteMethod: 'Пользовательские методы удаленного поиска'
      }
    },
    slider: {
      name: 'Слайдер',
      props: {
        min: 'Минимальное значение',
        max: 'Максимальное значение',
        disabled: 'Отключено',
        step: 'Шаг',
        showInput: 'Показывать поле ввода, действует только при выборе без диапазона',
        showInputControls: 'Показывать кнопки управления полем ввода, если поле ввода отображается',
        showStops: 'Показывать точки останова',
        range: 'Выбор диапазона',
        vertical: 'Вертикальный режим',
        height: 'Высота слайдера, обязательна в вертикальном режиме'
      }
    },
    space: {
      name: 'Space',
      props: {
        height: 'Высота'
      }
    },
    subForm: {
      name: 'Группа',
      props: {
        disabled: 'Отключено',
        syncDisabled: 'Принудительно синхронизировать состояние отключения с подформой'
      }
    },
    switch: {
      name: 'Переключатель',
      props: {
        disabled: 'Отключено',
        width: 'Ширина (пиксели)',
        activeText: 'Описание текста при включении',
        inactiveText: 'Описание текста при выключении',
        activeValue: 'Значение при включении',
        inactiveValue: 'Значение при выключении',
        activeColor: 'Цвет фона при включении',
        inactiveColor: 'Цвет фона при выключении'
      }
    },
    tableForm: {
      name: 'TableForm',
      props: {
        disabled: 'Отключено',
        max: 'Максимальное количество добавляемых строк, 0 — без ограничений'
      }
    },
    tableFormColumn: {
      name: 'TableFormColumn',
      label: 'TableFormColumn',
      props: {
        label: 'Заголовок',
        width: 'Ширина',
        color: 'Цвет'
      }
    },
    text: {
      name: 'Текст',
      props: {
        formCreateNative: 'Показывать заголовок',
        formCreateTitle: 'Заголовок',
        formCreateChild: 'Содержимое'
      }
    },
    textarea: {
      name: 'Текстовое поле',
      event: {
        change: 'Срабатывает при изменении значения, когда компонент теряет фокус или пользователь нажимает Enter'
      },
      props: {
        disabled: 'Отключено',
        readonly: 'Только для чтения',
        maxlength: 'Максимальная длина ввода',
        minlength: 'Минимальная длина ввода',
        showWordLimit: 'Показывать статистику количества слов',
        placeholder: 'Заполнитель',
        rows: 'Количество строк поля ввода',
        autosize: 'Адаптивная высота'
      }
    },
    timePicker: {
      name: 'Время',
      props: {
        pickerOptions: 'Опции, специфичные для текущего выбора времени и даты',
        readonly: 'Только для чтения',
        disabled: 'Отключено',
        editable: 'Можно ли вводить в текстовое поле',
        clearable: 'Показывать кнопку очистки',
        placeholder: 'Заполнитель для выбора без диапазона',
        startPlaceholder: 'Заполнитель для начального времени при выборе диапазона',
        endPlaceholder: 'Заполнитель для конечного времени при выборе диапазона',
        isRange: 'Выбор диапазона времени',
        arrowControl: 'Использовать стрелки для выбора времени',
        align: 'Выравнивание'
      }
    },
    tree: {
      name: 'Tree',
      event: {
        nodeClick: 'Срабатывает при клике на узел',
        nodeContextmenu: 'Срабатывает при правом клике на узел',
        checkChange: 'Срабатывает при клике на флажок',
        check: 'Срабатывает после клика на флажок узла',
        currentChange: 'Срабатывает при изменении текущего выбранного узла',
        nodeExpand: 'Срабатывает при развертывании узла',
        nodeCollapse: 'Срабатывает при сворачивании узла',
        nodeDragStart: 'Срабатывает при начале перетаскивания узла',
        nodeDragEnter: 'Срабатывает при перетаскивании в другие узлы',
        nodeDragLeave: 'Срабатывает при покидании узла при перетаскивании',
        nodeDragOver: 'Срабатывает при перетаскивании узла',
        nodeDragEnd: 'Срабатывает при завершении перетаскивания',
        nodeDrop: 'Срабатывает при успешном завершении перетаскивания и сброса'
      },
      props: {
        emptyText: 'Текст, отображаемый при пустом содержимом',
        props: 'Опции',
        renderAfterExpand: 'Рендерить дочерние узлы после первого развертывания узла дерева',
        defaultExpandAll: 'Развернуть все узлы по умолчанию',
        expandOnClickNode: 'Развернуть или свернуть узел при клике на него, если false, узел развернется или свернется только при клике на иконку стрелки',
        checkOnClickNode: 'Выбирать узел при клике на него',
        autoExpandParent: 'Автоматически развернуть родительский узел при развертывании дочернего',
        checkStrictly: 'При отображении флажка строго ли не связаны родительские и дочерние узлы',
        accordion: 'Развертывать только один узел дерева на одном уровне за раз',
        indent: 'Горизонтальный отступ (пиксели) между узлами соседних уровней',
        nodeKey: 'Атрибут для уникальной идентификации каждого узла дерева, должен быть уникальным для всего дерева'
      }
    },
    upload: {
      name: 'Upload',
      info: 'Присвойте URL, возвращенный интерфейсом, полю file.url в методе onSuccess',
      event: {
        remove: 'Срабатывает при удалении файла из списка файлов'
      },
      props: {
        listType: 'Тип загрузки',
        multiple: 'Поддерживается ли множественный выбор файлов',
        action: 'Адрес загрузки (обязательно)',
        beforeUpload: 'Хук перед загрузкой файла',
        onSuccess: 'Обратный вызов успешной загрузки',
        headers: 'Установить заголовки запроса загрузки',
        data: 'Дополнительные параметры, прикрепляемые при загрузке',
        name: 'Имя поля загружаемого файла',
        withCredentials: 'Поддержка отправки информации об учетных данных cookie',
        accept: 'Принимаемые типы загружаемых файлов',
        autoUpload: 'Загружать файл сразу после выбора',
        disabled: 'Отключено',
        limit: 'Максимальное количество разрешенных загрузок'
      }
    }
  }
}